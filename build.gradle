/*
 * Copyright 2016 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id "com.jfrog.bintray" version "1.7.3"
    id 'com.github.sherter.google-java-format' version '0.6'
    id "com.jfrog.artifactory" version "4.4.18"
}

description = 'RSocket: stream oriented messaging passing with Reactive Stream semantics.'

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'com.jfrog.artifactory'

    group = 'io.rsocket'
    version = mavenversion

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    // custom tasks for creating source/javadoc jars
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    // add javadoc/source jar tasks as artifacts
    artifacts {
        archives sourcesJar, javadocJar, jar
    }

    repositories {
        jcenter()
        maven { url 'http://repo.spring.io/milestone' }
        maven { url 'https://oss.jfrog.org/libs-snapshot' }
        maven { url 'https://dl.bintray.com/rsocket/RSocket' }
        maven { url 'https://dl.bintray.com/reactivesocket/ReactiveSocket' }
    }

    dependencies {
        compile 'io.projectreactor:reactor-core:3.1.0.M2'
        compile 'io.netty:netty-buffer:4.1.12.Final'
        compile 'org.reactivestreams:reactive-streams:1.0.0'
        compile 'org.slf4j:slf4j-api:1.7.25'
        compile 'com.google.code.findbugs:jsr305:3.0.0'

        testCompile 'junit:junit:4.12'
        testCompile 'org.mockito:mockito-core:1.10.19'
        testCompile 'org.hamcrest:hamcrest-library:1.3'
        testCompile 'org.slf4j:slf4j-log4j12:1.7.25'
        testCompile 'io.projectreactor:reactor-test:3.1.0.M2'
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifact sourcesJar
                artifact javadocJar
            }
        }
    }

    artifactory {
        publish {
            contextUrl = 'https://oss.jfrog.org'

            repository {
                repoKey = 'oss-snapshot-local' //The Artifactory repository key to publish to
                //when using oss.jfrog.org the credentials are from Bintray. For local build we expect them to be found in
                //~/.gradle/gradle.properties, otherwise to be set in the build server
                // Conditionalize for the users who don't have bintray credentials setup
                if (project.hasProperty('bintrayUser')) {
                    username = project.property('bintrayUser')
                    password = project.property('bintrayKey')
                }
            }

            publications('mavenJava')

            defaults {
                // Reference to Gradle publications defined in the build script.
                // This is how we tell the Artifactory Plugin which artifacts should be
                // published to Artifactory.
                publications('mavenJava')
                publishArtifacts = true
            }
        }
    }

    artifactoryPublish {
        dependsOn jar
    }

    bintray {
        if (project.hasProperty('bintrayUser')) {
            bintray.user = project.property('bintrayUser')
            bintray.key = project.property('bintrayKey')
        }
//        configurations = ['published', 'archives']
        publications = ['mavenJava']
        publish = false
        pkg {
            repo = 'RSocket'
//            vcsTag = "v${project.getVersion()}"
//            gpg {
//                sign = true
//            }
            name = project.name
//            dryRun = true
            websiteUrl = 'https://github.com/rsocket/rsocket-java'
            issueTrackerUrl = 'https://github.com/rsocket/rsocket-java'
            vcsUrl = 'https://github.com/rsocket/rsocket-java.git'
            licenses = ['Apache-2.0']
            if (project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
                def sonatypeUsername = project.property('sonatypeUsername')
                def sonatypePassword = project.property('sonatypePassword')
                mavenCentralSync {
                    user = sonatypeUsername
                    password = sonatypePassword
                }
            }
        }
    }
}
